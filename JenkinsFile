pipeline {
    agent any

    tools {
        jdk "jdk"
    }

    environment {
        DOCKER_IMAGE = "jimmychl/stockms"
        // KUBE_CONFIG = "/home/ubuntu/.kube/config"
        DOCKER_C_ID = "1af92dc4-e886-4c75-9a51-e9d2fea061b8"
        KUBE_CONFIG = "/home/ubuntu/.kube/config"
        AWS_REGION = "us-east-2"
        EKS_CLUSTER_NAME = "order-cluster"


    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/JimmyCHL/stock-ms.git'
            }
        }
        stage('Build & Test') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }
        stage('Docker Build & Push') {
            steps {
                script {
                    // Ensure Docker BuildKit is enabled
                    env.DOCKER_BUILDKIT = '1'

                    // Build Docker image
                    sh 'docker build -t $DOCKER_IMAGE:latest .'

                    // Login to DockerHub
                    withCredentials([usernamePassword(credentialsId: DOCKER_C_ID , usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    }

                    // Push the Docker image to DockerHub
                    sh 'docker push $DOCKER_IMAGE:latest'
                }
            }
        }
        stage('Deploy to EKS') {
    steps {
        script {
            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: 'd8112ed0-8b5d-46bf-a101-0c9f3bc31376',  // Jenkins credential ID for AWS keys
                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
                sh """
                    # Configure kubectl for EKS
                    aws eks update-kubeconfig \
                      --region ${AWS_REGION} \
                      --name ${EKS_CLUSTER_NAME}

                    # Apply manifests
                    kubectl apply -f k8s-manifests/deployment.yaml
                    kubectl apply -f k8s-manifests/service.yaml
                """
            }
        }
        }
        }
    }
}
